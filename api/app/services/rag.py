import logging
from typing import List, Dict, Any
from datetime import datetime
from pathlib import Path
import json
import hashlib
from api.app.services.llm import LLMService
from api.app.services.blockchain import BlockchainService
from api.app.services.ipfs import IPFSService
from api.app.services.chat_session import ChatSessionService

logger = logging.getLogger(__name__)

class RAGService:
    def __init__(
        self,
        llm_service: LLMService,
        blockchain_service: BlockchainService,
        ipfs_service: IPFSService,
        chat_session_service: ChatSessionService
    ):
        self.llm_service = llm_service
        self.blockchain_service = blockchain_service
        self.ipfs_service = ipfs_service
        self.chat_session_service = chat_session_service
        self.documents: Dict[str, Dict[str, Any]] = {}

    async def upload_document(self, file_path: str) -> Dict[str, Any]:
        """Upload a document to IPFS and store its metadata."""
        try:
            # Read the document
            with open(file_path, 'r') as f:
                content = f.read()

            # Upload to IPFS
            ipfs_hash = await self.ipfs_service.add_content(content)

            # Create document metadata
            document = {
                'id': str(hashlib.sha256(file_path.encode()).hexdigest()),
                'name': Path(file_path).name,
                'ipfsHash': ipfs_hash,
                'status': 'Uploaded',
                'content': content,
                'timestamp': datetime.utcnow().isoformat()
            }

            # Store in memory (TODO: Replace with database)
            self.documents[document['id']] = document

            return document

        except Exception as e:
            logger.error(f"Error uploading document: {str(e)}")
            raise

    async def query_documents(self, query: str) -> Dict[str, Any]:
        """Query documents and generate a response with sources."""
        try:
            # TODO: Implement actual RAG logic
            # For now, return a mock response
            response = "This is a mock response that would be generated by the RAG system..."
            sources = [
                {
                    'id': '1',
                    'snippet': 'This is a relevant text snippet from the document that answers the question...',
                    'ipfsHash': 'QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco',
                    'transactionHash': '0x1234...5678'
                }
            ]

            # Create verification payload
            timestamp = datetime.utcnow().replace(microsecond=0).isoformat() + "Z"
            verification_payload = {
                "query": query,
                "response": response,
                "sources": sources,
                "timestamp": timestamp
            }

            # Generate verification hash
            verification_hash = self.llm_service.create_verification_hash(verification_payload)

            # Sign the hash
            signature = self.blockchain_service.sign_message(verification_hash)

            # Submit to blockchain
            blockchain_result = await self.blockchain_service.submit_to_blockchain(verification_hash)
            transaction_hash = blockchain_result.get('transaction_hash')

            # Upload to IPFS
            ipfs_data = {
                "query": query,
                "response": response,
                "sources": sources,
                "timestamp": timestamp,
                "verification_hash": verification_hash,
                "signature": signature,
                "transaction_hash": transaction_hash
            }
            ipfs_cid = await self.ipfs_service.upload_json(ipfs_data)

            return {
                "response": response,
                "sources": sources,
                "verification_hash": verification_hash,
                "signature": signature,
                "transaction_hash": transaction_hash,
                "ipfs_cid": ipfs_cid
            }

        except Exception as e:
            logger.error(f"Error querying documents: {str(e)}")
            raise

    async def get_documents(self) -> List[Dict[str, Any]]:
        """Get list of uploaded documents."""
        return list(self.documents.values())

    async def verify_response(
        self,
        verification_hash: str,
        signature: str
    ) -> bool:
        """Verify a RAG response using blockchain."""
        try:
            # Verify the signature
            result = await self.blockchain_service.verify_message(
                verification_hash,
                signature
            )
            return result.get('verified', False)
        except Exception as e:
            logger.error(f"Error verifying response: {str(e)}")
            return False 